# # Case Study: FeI$_{2}$
# 
# This example goes through all the steps necessary to calculate a dynamical
# structure factor for the compound FeI$_{2}$. This is an effective spin-1
# material with strong single-ion anisotropy, making it an excellent candidate for
# treatment with SU(3) spin dynamics. In particular, one of the elementary
# excitations of the system can only be captured clasically with an SU(3)
# treatment. One magnon, clearly visible in the experimental data, would simply be
# absent if we were to employ traditional Landau-Lifshitz dynamics or SU(2) spin
# wave theory. Full details about the model can be found in reference [1].
# 
# The model contains a number of competing, anisotropic exchange interactions
# together with a strong single-ion anisotropy. Writing the exchange terms in the
# most general way, the Hamiltonian has the form:
# 
# $$ \mathcal{H}=\sum_{(i,j)}J_{ij}\mathbf{S}_i\cdot\mathbf{S}_j - D\sum_i
# \left(S\^z\right)^2 $$
# 
# We will go through the process of implementing this Hamiltonian below. Before
# beginning, we need to import the required packages, starting with `Sunny`. We
# will also add `GLMakie`, a plotting package, which may take a minute to load. If
# you see `Package X not found in current path`, you can install the package by
# entering `using Pkg; pkg"add X"` in the Julia REPL.

using Sunny
using GLMakie
using Formatting
#nb Sunny.offline_viewers()  # Inject Javascript code for additional plotting capabilities 


# ## Crystals and Symmetry Analysis
# We begin by specifying a crystal. If a CIF file available, it can be loaded
# using `Crystal("file.cif")`. A `Crystal` may also be created simply by
# providing a space group number. Here we will construct the crystal by hand,
# providing `Crystal` with a set of lattice vectors and basis vectors, where the
# basis vectors specify the locations of atoms within the unit cell in terms of
# fractional coordinates. We may also assign labels to each atom with the
# optional keyword `types`, providing one label for each basis vector.
# 
# For convenience, we will create a function which performs all these steps.

function FeI2_crystal()
    a = b = 4.05012  # Define the length of the three lattice vectors,
    c = 6.75214      # with units here given in angstroms.

    lat_vecs = lattice_vectors(a, b, c, 90, 90, 120) # This is a convenience method.
                                                     ## Alternatively, lattice vectors may be
                                                     ## specified as columns of a 3x3 matrix.
    basis_vecs = [[0,0,0], [1/3, 2/3, 1/4], [2/3, 1/3, 3/4]]  # Locations of atoms in fractional 
                                                              ## coordinates.
    types = ["Fe", "I", "I"] # Assign a name to each atom
    Crystal(lat_vecs, basis_vecs; types) # Create the crystal
end;

# Sunny will perform symmetry analysis on the crystal, identifying the space
# group. To aid the symmetry analysis, it is often helpful to provide names for
# the atoms, as we did above. The result of Sunny's analysis is given as output
# when creating the `Crystal`:

FeI2_crystal()

# Sunny has inferred the space group `P -3 m 1`, corresponding to international
# number 164. This agrees with the crystal specification given in reference
# \[1\], reproduced below.
#
# Sunny will use the symmetry information contained in a `Crystal` throughout the
# process of model creation. In particular, the `Crystal` will be used to
# determined allowed interactions and anisotropies. The information also enables
# Sunny to propagate interactions and anisotropies to all symmetry-equivalent
# sites on a lattice.

# ## Spin Systems
# The basic type used to model a spin system is simply called `System`. A
# `System` can be created by providing a crystal, dimensions for a finite
# lattice, and local information about each class of site within the unit cell:
# 
# ```
# System(crystal::Crystal, latsize, spininfos, mode)
# ```
# 
# Local spin information is generated by creating a `SpinInfo(i, S; g=2)`, where
# `i` is the site (the ordering of the atoms is given when creating the
# `Crystal`) and `S` is the local magnetic moment. The optional keyword `g`
# specifies the local g-tensor, which by default is isotropic with value `2`. A
# custom g-tensor may be given as a 3x3 matrix. 
# 
# The `mode` argument determines whether to use traditional Landau-Lifshitz
# dyanmics (`:dipole`), or generalized SU(_N_) dynamics (`:SUN`).
# 
# In the code snippet below, a `System` is created  on a 4x4x4 lattice. We will
# use the function `subcrystal` to restrict our `Crystal` to the magnetic `Fe`
# ions.

S = 1
cryst = subcrystal(FeI2_crystal(), "Fe")
sys = System(cryst, (4,4,4), [SpinInfo(1,S)], :SUN)

# Note that Sunny has created an SU(3) system, the appropriate choice for spin-1
# system: $2S+1=3$.

# ## Interactions and anisotropies
#nb # It is often helpful to be able to visualize the `Crystal`` and identify
#nb # equivalence classes of bonds. An interactive viewer is available for precisely
#nb # this purpose: `view_crystal(crystal, max_dist)`:
#nb 
#nb view_crystal(cryst, 8.0)

# ### Obtaining symmetry information
# The `System` above does not contain interactions, only a finite lattice with the
# symmetry properities of our `Cyrstal` together with local spin information for
# each site of the lattice. We still need to specify the interactions and
# anisotropies given in our Hamiltonian.
# 
# Information about the allowed interactions and anisotropies is provided by
# `print_symmetry_table(cryst, max_dist)`:

print_symmetry_table(cryst, 10.0)

# The output begins by specifying information about each site of the `Crystal`.
# (In our case there is only one site, since we restricted our crystal to the
# iron ion.) The allowed form of any g-tensor is given as a 3x3 matrix, and the
# allowed form of any single-site anisotropy is given as the most general linear
# combination of Stevens operators.
# 
# After single-site information, Sunny provides a list of the allowed bilinear
# interactions on every bond that lies within `max_dist` from the origin of the
# unit cell. The bond are specified in the following format: Bond(i, j, n),
# where `i` and `j` are an pair of atoms within the unit cell. The number of
# each site is as given when creating the `Crystal`. Note that the relative
# order of `i` and `j` when calling `Bond` is significant when the exchange
# tensor contain antisymmetric elements, as is the case for
# Dzyaloshinskii‚ÄìMoriya interactions. Finally, `n` is a vector of three integers
# specifying lattice offsets. So `Bond(1, 1, [1,0,0])` specifies a bond between
# the same atom in two different unit cells, where the cell offset is along the
# direction of the first lattice vector.

# ### Assigning interactions and anisotropies
# Bilinear interactions are assigned to bonds with `set_exchange!(sys, J,
# bond)`, where `J` is the exchange tensor. `J` may be either a number, for
# simple Heisenberg exchange, or a 3x3 matrix. When `set_exchange!` is called,
# Sunny will both analyze `J` to ensure that it is symmetry-allowed and then
# propagate `J`, with appropriate transformations, to all symmetry-equivalent
# bonds in your `System`.
#
# The function to assign a single site anisotropy is similar:
# `set_anisotropy!(sys, op, i)`. `i` is simply a site rather than a bond. `op`
# here a polynomial of either spin operators or Stevens operators. Sunny
# provides special symbols for their construction: `ùíÆ` is a vector of three
# symbolic operators, corresponding to ùíÆÀ£, ùíÆ ∏, and ùíÆ·∂ª, and `ùí™` is a matrix
# of symbolic Stevens that takes two indices, corresponding to the traditional
# $k$ (irrep) and $q$ (row or column) indices of the Stevens tensors. For
# example, to assigned $(S^z)^2$ to our only equivalence class of site, we would called
# `set_anisotropy!(sys, ùíÆ[3]^2, 1)`.
#
# The function below combines everything we have learned so far to create a complete
# model of our FeI2 system.

function FeI2_system(; latsize=(4,4,4), S=1, seed=0)
    ## Create the system
    cryst = subcrystal(FeI2_crystal(), "Fe")
    sys = System(cryst, latsize, [SpinInfo(1,S)], :SUN; seed)

    ## Establish exchange parameters as provided in reference [1]
    J1pm   = -0.236 
    J1pmpm = -0.161
    J1zpm  = -0.261
    J2pm   = 0.026
    J3pm   = 0.166
    J‚Ä≤0pm  = 0.037
    J‚Ä≤1pm  = 0.013
    J‚Ä≤2apm = 0.068
    D      = 2.165

    J1zz   = -0.236
    J2zz   = 0.113
    J3zz   = 0.211
    J‚Ä≤0zz  = -0.036
    J‚Ä≤1zz  = 0.051
    J‚Ä≤2azz = 0.073

    J1xx = J1pm + J1pmpm 
    J1yy = J1pm - J1pmpm
    J1yz = J1zpm

    ## Convert parameters to exchange matrices and make a list of `Js`
    Js = [
        [J1xx  0.0   0.0;
         0.0   J1yy  J1yz;
         0.0   J1yz  J1zz],
        [J2pm  0.0  0.0;
         0.0   J2pm 0.0;
         0.0   0.0  J2zz],
        [J3pm   0.0   0.0;
         0.0    J3pm  0.0;
         0.0    0.0   J3zz],
        [J‚Ä≤0pm  0.0   0.0;
         0.0    J‚Ä≤0pm 0.0;
         0.0    0.0   J‚Ä≤0zz],
        [J‚Ä≤1pm  0.0   0.0;
         0.0    J‚Ä≤1pm 0.0;
         0.0    0.0   J‚Ä≤1zz],
        [J‚Ä≤2apm  0.0   0.0;
         0.0    J‚Ä≤2apm 0.0;
         0.0    0.0   J‚Ä≤2azz],
    ]

    ## Make a corrresponding list of bonds
    bonds = [
        Bond(1,1,[1,0,0]),
        Bond(1,1,[1,2,0]),
        Bond(1,1,[2,0,0]),
        Bond(1,1,[0,0,1]),
        Bond(1,1,[1,0,1]),
        Bond(1,1,[1,2,1]),
    ]

    ## Assign interactions and anisotropy to the system
    for (bond, J) in zip(bonds, Js)
        set_exchange!(sys, J, bond)
    end
    set_anisotropy!(sys, -D*ùíÆ[3]^2, 1)

    return sys
end;

# We can now create a `System` corresponding to our model: 

sys_small = FeI2_system(; latsize=(4,4,4))

# # Calculating a dynamical spin structure factor
# In the remainder of this tutorial, we will examine Sunny's capabilities for
# calculating structure factors using generalized SU(_N_) classical dynamics.
# This is a Monte Carlo calculation and will require the sampling of many spin
# configurations from the Boltzmann distribution at a particular temperature.
# These samples are then used to generate dynamical trajectories that are
# analyzed to produce correlation information, i.e., a dynamical structure
# factor $mathcal{S}^{\alpha}{\beta}(\mathbf{q},\omega)$. To compare results
# with low-temperature experimental data or spin wave calculations, it is
# necessary to first identify a ground state of the system. We can then
# thermalize this ground state with a Langevin integrator to generate sample
# spin configurations.
# 
# ## Finding a ground state
# 
# While we will be using Langevin integration to generate sample spin
# configurations, it is also a powerful tool for optimization, as will now be
# demonstrated. The first step will be to build the integrator itself. 

kT = 10.0                # meV
Œît  = abs(0.05 / 2.165)  # Safe choice for integration step size, divisor is largest coefficient in Hamiltonian
Œª = 0.1                  # Damping coefficient, empirical value that determines decorrelation time

integrator = LangevinHeunP(kT, Œª, Œît);

# This integrator can then be used to implement a simple annealing protocol. In
# addition to a `System` and the integrator itself, the following function will
# take a list of temperatures and a number specifying how many time steps to
# take at each temperature. 

function anneal!(sys, integrator, nsteps, kTs)
      Es = zeros(length(kTs))           # Buffer to record energy
      for (i, kT) in enumerate(kTs)
            integrator.kT = kT          # Set the temperature
            for _ in 1:nsteps           # Advance the state nsteps
                step!(sys, integrator)
            end
            Es[i] = energy(sys)         # Record the energy
      end
      return Es
end

# Finally we perform the annealing. 

kT = 10.0                        # Starting temp in meV
kTs = [kT*0.9^k for k in 0:100]  # Temperature schedule
nsteps = round(Int, 30.0/Œît)     # Set nsteps to 30.0 meV‚Åª¬π 
randomize_spins!(sys_small)      # Set random (infinite temperature) initial condition

Es = anneal!(sys_small, integrator, nsteps, kTs)

for _ in 1:nsteps                # Run at T=0 for a short period
    step!(sys_small, integrator)
end

# Plotting the energies recorded during the annealing process will help us determined
# whether the process has converged.

fig = Figure()
idxs = 1:10:length(kTs)
xticks = (idxs, [format("{:.3f}",  kTs[i]) for i in idxs])
ax = Axis(fig[1,1];
    xlabel = "Temperature (meV)",
    ylabel = "Total Energy (meV)",
    xticks
)
lines!(ax, Es)
fig

# It appears that the system has reached at least a local minimum. We will use
# the function `plot_spins` to examine if the spin configuration matches our
# prior ideas about what the ground state looks like.

plot_spins(sys_small; arrowlength=2.5, linewidth=0.75, arrowsize=1.5)


# This is correct, but our spin system is quite small. Because the calculation
# will be performed on a finite lattice, our resolution in momentum space will be
# limited by the system size. We will therefore extend the system periodically 
# into a larger `System`:

sys = extend_periodically(sys_small, (4,4,1))  # Multiply first and second lattice dimensions by 4
plot_spins(sys; arrowlength=2.5, linewidth=0.75, arrowsize=1.5)

# ## Calculating the structure factor
# To get a good equilibrium sample, we will next thermalize the system at a low
# temperature, again using a Langevin integrator. The parameters we select below
# are known to be effective for this model but will need to be determined for
# each specific case. 

decorrelation_time = 2.0                    # Time in meV‚Åª¬π required to get an uncorrelated sample
nsteps = round(Int, decorrelation_time/Œît)  # Convert to number of time steps
kT = 0.5 * Sunny.meV_per_K                  # Set temperature meV equivalent of 0.5 K
integrator = LangevinHeunP(kT, Œª, Œît)       # Build integrator with these parameters

for _ in 1:5nsteps                          # Run for sufficient time to thermalize
    step!(sys, integrator)
end;

# The spins in our sample should now represent a good sample at 0.5 K. We can
# proceed with the calculation by calling `DynamicStructureFactor`. Three
# keyword parameters are required to determine the œâ information that will be
# calculated: an integrator step size, the number of œâs to resolve, and the
# maximum œâ to resolve. For the time step, twice the value used for the Langevin
# integrator is usually a good choice.

sf = DynamicStructureFactor(sys; Œît=2Œît, nœâ=120, œâmax=7.5);

# `sf` currently contains dynamical structure data generated from a single
# sample. Additional samples can be added by generating a new spin configuration
# and calling `add_sample!`:

for _ in 1:2
    for _ in 1:nsteps            # Generate a new sample spin configuration
        step!(sys, integrator)
    end
    add_sample!(sf, sys)         # Accumulate the sample into `sf`
end;

# ## Accessing structure factor data 
# The basic function for accessing intensity data is  